<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
               xmlns:s="library://ns.adobe.com/flex/spark"
               xmlns:mx="library://ns.adobe.com/flex/mx" initialize="setup();">
    <s:layout>
        <s:VerticalLayout/>
    </s:layout>

    <s:states>
        <s:State name="record"/>
        <s:State name="error"/>
    </s:states>
    <fx:Script><![CDATA[
        import mx.core.FlexGlobals;

        [Bindable]
        public var ref:String;

        [Bindable]
        public var record_url:String;

        [Bindable]
        public var stream_name:String;

        var nc:NetConnection;
        var ns:NetStream;

        var cam:Camera;
        var mic:Microphone;

        var cameraReady:Boolean;
        var netReady:Boolean;

        var flushinterval:Number;

        function setup():void {
            record_url = FlexGlobals.topLevelApplication.parameters.record_url;
            stream_name = FlexGlobals.topLevelApplication.parameters.stream_name;
            ref = FlexGlobals.topLevelApplication.parameters.ref;

            currentState = "record";

            ExternalInterface.addCallback("connect", connect);
            ExternalInterface.addCallback("record", record);
            ExternalInterface.addCallback("stop", stopClicked);
            ExternalInterface.addCallback("micLevel", micLevel);
            ExternalInterface.addCallback("attachCamera", attachCamera);

            cameraReady = false;

            debugMessage("Setting called");
        }

        /* External API */
        function micLevel() {
            return mic.activityLevel;
        }

        function connect() {
            debugMessage("Connect");
            nc = new NetConnection();
            nc.addEventListener(NetStatusEvent.NET_STATUS, onNetStatus);
            nc.connect(record_url);
        }

        function record():void {
            publishCamera();
            debugMessage("Recording");

        }


        function stopClicked():void
        {
            // pause the netStream object
            ns.pause();
            //detach video
            ns.attachCamera(null);
            ns.attachAudio(null);
            //also detach video from our monitor, in our case an object called videoContainer
            cameraDisplay.attachCamera(null);

            //spin up a thread to check the buffer every 500ms and close it once empty
            debugMessage("Should have worked!")
            ExternalInterface.call("__video_recorder_upload_start", ref, ns.bufferLength);
            flushinterval = setInterval(flusher, 500);
        }

        function flusher():void{
            debugMessage("Calling the flusher : " + ns.bufferLength + " left");
            //This gets called by the setInterval above every 500ms until the interval is
            //cleared below, when the buffer is empty
            if((ns.bufferLength == 0)){
                //great, the buffer is empty, close it up and stop this interval
                debugMessage("Disconnecting");
                clearInterval(flushinterval);
                disconnect();
            } else{
                debugMessage("Got some data left");
                trace("still flushing: " + ns.bufferLength);
                ExternalInterface.call("__video_recorder_upload_progress", ref, ns.bufferLength);
            }
        }

        function disconnect():void {
            try {
                ns.dispose();
                nc.close();
            } catch (e) {
                debugMessage(e);
            }
            debugMessage("disposed : " + new Date().getTime());
            ExternalInterface.call("__video_recorder_upload_complete", ref);
            mic.addEventListener(SampleDataEvent.SAMPLE_DATA, voidFunc);
        }

        /* External API */


        function voidFunc(event:SampleDataEvent) {

        }

        function attachCamera():void {
            if (Camera.names.length > 0) {
                debugMessage("User has at least one camera installed")
            }
            else {
                ExternalInterface.call("__video_recorder_absent", ref);
            }

            mic = Microphone.getMicrophone();

            mic.gain = 60;
            mic.rate = 11;
            mic.setUseEchoSuppression(true);
            mic.setSilenceLevel(0, -1);

            mic.addEventListener(SampleDataEvent.SAMPLE_DATA, voidFunc);

            cam = Camera.getCamera();
            cam.setMode(480, 360, 30, false);
            cam.setQuality(0, 90);
            cam.setKeyFrameInterval(30);

            cam.addEventListener(ActivityEvent.ACTIVITY, camera_activity);
            cam.addEventListener(StatusEvent.STATUS, statusHandler);

            cameraDisplay.attachCamera(cam);

            debugMessage("Camera is setup.");
        }


        function statusHandler(event:StatusEvent):void {
            if (cam.muted) {
                ExternalInterface.call("__video_recorder_denied", ref);
            } else {
                debugMessage("User clicked Accept.");
                Security.showSettings(SecurityPanel.PRIVACY);
            }
        }

        function camera_activity(evt:ActivityEvent):void {
            if (!cameraReady) {
                debugMessage("Camera should be ready now");
                cameraReady = true;
                ExternalInterface.call("__video_recorder_ready", ref);
            }
        }

        function onNetStatus(event:NetStatusEvent):void {
            debugMessage("Net Status: " + event.info.code);
            if (event.info.code == "NetConnection.Connect.Success") {
                netReady = true;
                ExternalInterface.call("__video_recorder_connect", ref);
            }
        }

        function publishCamera():void {
            mic.removeEventListener(SampleDataEvent.SAMPLE_DATA, voidFunc);

            ns = new NetStream(nc);
            ns.bufferTime = 30;
            debugMessage("Buffer Time"+ns.bufferTime);

            ns.attachCamera(cam);
            ns.attachAudio(mic);
            ns.publish(stream_name, "live");


            ExternalInterface.call("__video_recorder_recording", ref);
        }

        function showError(message:String) {
            currentState = "error";
            errorLabel.text = message;
        }

        private function debugMessage(msg:String):void {
            ExternalInterface.call("__video_recorder_debug", ref, msg);
        }
        ]]></fx:Script>

    <mx:VideoDisplay id="cameraDisplay"
                     creationComplete="attachCamera();"
                     width="100%"
                     height="100%" includeIn="record"/>

    <mx:Label id="errorLabel" includeIn="error"/>


</s:Application>
